#include "TelegramHandler.h"
#include <config.h>
//#include <json.h>

// Message handler wrapper (needed because FastBot uses function pointers)
TelegramHandler* botInstance = nullptr;
void messageHandlerWrapper(FB_msg& msg) {
    if (botInstance != nullptr) {
        botInstance->handleNewMessages(msg);
    }
}

// Constructor
TelegramHandler::TelegramHandler(FastBot &bot) : bot(bot) {
botInstance = this;
}
// Initialize the bot
void TelegramHandler::begin()
{
  bot.attach(messageHandlerWrapper);
  // Set the Telegram bot properies
  bot.setPeriod(botRequestDelay);
  bot.showMenu("Welcome! Use /start to begin.");
}

// Handle incoming messages
void TelegramHandler::tick()
{
  bot.tick();
}

void TelegramHandler::sendMessage(const String &message)
{
  bot.sendMessage(message);
}

void TelegramHandler::sendMessage(const String &message, const String &chat_id)
{
  bot.sendMessage(message, chat_id);
}

void TelegramHandler::sendMainMenu(const String& chat_id)
{
  String menu = "üè† *–ö–æ—Ç–µ–ª* \n\n";
      menu += "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n";
      menu += "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(roomTemperature, 1) + "¬∞C\n";
      menu += "‚Ä¢ –£—Å—Ç–∞–≤–∫–∞: " +  String(sliderValue) + "¬∞C\n";
      menu += "‚Ä¢ –û—Ç–æ–ø–ª–µ–Ω–∏–µ: " +  String(button1State ? "–í–ö–õ" : "–í–´–ö–õ") + "\n";
      menu += "‚Ä¢ –í–æ–¥–∞: " +  String(button2State ? "–í–ö–õ" : "–í–´–ö–õ") + "\n";
      menu += "‚Ä¢ –†–µ–∂–∏–º: " +  String(button3State ? "–ê–í–¢–û" : "–†–£–ß") + "\n";
      menu += "‚Ä¢ –ü–ª–∞–º—è: " +  String(flameState ? "–í–ö–õ" : "–í–´–ö–õ") + "\n";
      
      //String buttons = "[\"üìä –°—Ç–∞—Ç—É—Å\", \"üå°Ô∏è –£—Å—Ç–∞–≤–∫–∞\"],";
      //buttons += "[\"üî• –í–∫–ª—é—á–∏—Ç—å\", \"‚ùÑÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å\"],";
      //buttons += "[\"üîÑ –ê–≤—Ç–æ\", \"‚úã –†—É—á–Ω–æ–π\"]";
      //String buttons = F("Menu 1 \t Menu 2 \t Menu 3 \n Back");
      String buttons = F("üìä –°—Ç–∞—Ç—É—Å \t üå°Ô∏è –£—Å—Ç–∞–≤–∫–∞ \n");
      buttons += F("üî• –í–∫–ª—é—á–∏—Ç—å \t ‚ùÑÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å \n");
      buttons += F("üîÑ –ê–≤—Ç–æ \t ‚úã –†—É—á–Ω–æ–π");
      
      bot.inlineMenu(menu, buttons, chat_id);
}

String TelegramHandler::unescapeUnicode(const String& input) {
    String result;
    int length = input.length();
    
    for (int i = 0; i < length; i++) {
        if (i + 5 < length && 
            input[i] == '\\' && 
            input[i + 1] == 'u') {
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º hex –∫–æ–¥
            String hexCode = input.substring(i + 2, i + 6);
            uint32_t unicodeValue = strtoul(hexCode.c_str(), NULL, 16);
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Unicode code point –≤ UTF-8
            if (unicodeValue <= 0x7F) {
                // 1 –±–∞–π—Ç: 0xxxxxxx
                result += (char)unicodeValue;
            } else if (unicodeValue <= 0x7FF) {
                // 2 –±–∞–π—Ç–∞: 110xxxxx 10xxxxxx
                result += (char)(0xC0 | (unicodeValue >> 6));
                result += (char)(0x80 | (unicodeValue & 0x3F));
            } else if (unicodeValue <= 0xFFFF) {
                // 3 –±–∞–π—Ç–∞: 1110xxxx 10xxxxxx 10xxxxxx
                result += (char)(0xE0 | (unicodeValue >> 12));
                result += (char)(0x80 | ((unicodeValue >> 6) & 0x3F));
                result += (char)(0x80 | (unicodeValue & 0x3F));
            } else if (unicodeValue <= 0x10FFFF) {
                // 4 –±–∞–π—Ç–∞: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
                result += (char)(0xF0 | (unicodeValue >> 18));
                result += (char)(0x80 | ((unicodeValue >> 12) & 0x3F));
                result += (char)(0x80 | ((unicodeValue >> 6) & 0x3F));
                result += (char)(0x80 | (unicodeValue & 0x3F));
            }
            
            i += 5; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        } else {
            result += input[i];
        }
    }
    
    return result;
}

void TelegramHandler::handleNewMessages(FB_msg &msg)
{
  Serial.println("ReceivedNewMessages");
  // Chat id of the requester
  String chat_id = msg.chatID;
  Serial.println("chat ID" + chat_id);
  // Print the received message
  String text = msg.data;
   Serial.println(text);
   Serial.println(unescapeUnicode(msg.data));

  String from_name = msg.first_name;

  if (chat_id == CHAT_ID)
  {
    // update firmware

    if (msg.OTA)
    {
      Serial.println(msg.fileName);
      if (msg.fileName == "spiffs.bin")
      {
        Serial.println("Received Spiffs");
        bot.updateFS(); // update spiffs
      }
      else
      {
        Serial.println("Received OTA");
        bot.update(); // update OTA
      }
    }

    // download file to FS
    /*if (msg.isFile) {                     // —ç—Ç–æ —Ñ–∞–π–ª
    Serial.print("Downloading ");
    Serial.println(msg.fileName);

    String path = '/' + msg.fileName;   // –ø—É—Ç—å –≤–∏–¥–∞ /filename.xxx
    //File f = SPIFFS.open("/freq.json", "w");
    File f = LittleFS.open(path, "w");
    //File f = SPIFFS.open(path, "w");  // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏
    //bool status = bot.downloadFile(f, msg.fileUrl);  // –∑–∞–≥—Ä—É–∂–∞–µ–º
    Serial.println(status ? "OK" : "Error");    // —Å—Ç–∞—Ç—É—Å
  }
*/
    if (msg.text == "/start" || msg.data == "\\ud83d\\udcca \\u0421\\u0442\\u0430\\u0442\\u0443\\u0441")  //üìä –°—Ç–∞—Ç—É—Å
    {
      sendMainMenu(CHAT_ID);
    }
    //Serial.println("üî•–í–∫–ª—é—á–∏—Ç—å");
    //Serial.println(unescapeUnicode(msg.data));
    if (msg.data == "\\ud83d\\udd25 \\u0412\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c") //"üî•–í–∫–ª—é—á–∏—Ç—å")
    //if (unescapeUnicode(msg.data) == "üî• –í–∫–ª—é—á–∏—Ç—å")
    {
      Serial.print("Start boiler from bot");
      button1State = true;
      enableCentralHeating = true;
      bot.sendMessage("‚úÖ –û–±–æ–≥—Ä–µ–≤ –≤–∫–ª—é—á–µ–Ω", CHAT_ID);
      sendMainMenu(CHAT_ID);
    
      
    }
    else if (msg.data == "\\u2744\\ufe0f \\u0412\\u044b\\u043a\\u043b\\u044e\\u0447\\u0438\\u0442\\u044c")  //"‚ùÑÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å")
    {
      Serial.print("Stop boiler from bot");
      button1State = false;
      enableCentralHeating = false;
      bot.sendMessage("‚úÖ –û–±–æ–≥—Ä–µ–≤ –≤—ã–∫–ª—é—á–µ–Ω", CHAT_ID);
      sendMainMenu(CHAT_ID);
    }
    else if (msg.data == "\\ud83d\\udd04 \\u0410\\u0432\\u0442\\u043e")  //"üîÑ –ê–≤—Ç–æ 
    {
      Serial.print("Auto mode from bot");
      button3State = true;
      bot.sendMessage("‚úÖ –†–µ–∂–∏–º –ê–≤—Ç–æ", CHAT_ID);
      sendMainMenu(CHAT_ID);
    }
    else if (msg.data == "\\u270b \\u0420\\u0443\\u0447\\u043d\\u043e\\u0439")  //"‚úã –†—É—á–Ω–æ–π"
    {
      Serial.print("Manual mode from bot");
      button3State = false;
      bot.sendMessage("‚úÖ –†–µ–∂–∏–º –†—É—á–Ω–æ–π", CHAT_ID);
      sendMainMenu(CHAT_ID);
    }
    else if (text.substring(0, 3) == "@st")
    {
      String conf = "Config:\n";
      conf += "Room Temp: " + String(roomTemperature, 3) + "\n";
      conf += "Water Temp:" + String(waterTemperature, 3) + "\n";
    
/*    Serial.print(", Water Temp: ");
    Serial.print(waterTemperature);
    Serial.print("¬∞C, Steam Temp: ");
    Serial.print(steamTemperature);
    Serial.print("¬∞C, Slider: ");
    Serial.print(sliderValue);
    Serial.print(", Btn1: ");
    Serial.print(button1State ? "ON" : "OFF");
    Serial.print(", Btn2: ");
    Serial.print(button2State ? "ON" : "OFF");
    Serial.print(", Btn3: ");
    Serial.print(button3State ? "AUTO" : "MAN");
    Serial.print(", Flame: ");
    Serial.println(flameState ? "ON" : "OFF");
  */    
      bot.sendMessage(conf, CHAT_ID);
    }
  }
}